# multi-stage build for production-optimized image
FROM node:22-alpine AS base

# enable corepack for pnpm
RUN corepack enable

# create app directory
WORKDIR /usr/src/app

# copy package files for dependency resolution
COPY package.json pnpm-lock.yaml ./

# ================================
# build stage
# ================================
FROM base AS build

# install all dependencies (including dev dependencies)
RUN pnpm install --frozen-lockfile

# copy source code and configuration files
COPY . .

# generate prisma client for auth database
RUN pnpm exec prisma generate --schema=apps/meeting-api-gateway/src/iam/prisma/schema.prisma

# build the application
RUN pnpm run build meeting-api-gateway

# ================================
# production stage
# ================================
FROM node:22-alpine AS production

# enable corepack for pnpm
RUN corepack enable

# use pre-existing node user for security

# create app directory
WORKDIR /usr/src/app

# copy package files and install only production dependencies
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --prod --frozen-lockfile

# copy built application from build stage
COPY --from=build --chown=node:node /usr/src/app/dist ./dist

# copy prisma generated clients from build stage
COPY --from=build --chown=node:node /usr/src/app/apps/meeting-api-gateway/src/iam/generated ./apps/meeting-api-gateway/src/iam/generated
COPY --from=build --chown=node:node /usr/src/app/packages/meeting-api-gateway/generated ./packages/meeting-api-gateway/generated

# copy any additional required files
COPY --chown=node:node nest-cli.json ./
COPY --chown=node:node tsconfig.json ./
COPY --chown=node:node apps/meeting-api-gateway/tsconfig.app.json ./apps/meeting-api-gateway/

# copy prisma schema (needed for runtime)
COPY --chown=node:node apps/meeting-api-gateway/src/iam/prisma/ ./apps/meeting-api-gateway/src/iam/prisma/

# switch to non-root user
USER node

# expose port
EXPOSE 3001

# start the application
CMD ["node", "dist/apps/meeting-api-gateway/main.js"]
