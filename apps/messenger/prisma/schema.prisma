generator client {
  provider = "prisma-client-js"
  output   = "../generated/messenger-client"
}

generator typescript {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../../packages/prisma-types/src/generated/messenger.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model messages {
  id              String   @id @default(uuid())
  conversation_id String
  user_id         String
  content         String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  conversation conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  users        users?        @relation(fields: [user_id], references: [id])
}

model users {
  id        String @id @default(uuid())
  name      String @db.VarChar(100)
  last_name String @db.VarChar(100)
  email     String @unique
  image_url String @db.VarChar(255)

  messages            messages[]
  users_conversations users_conversations[]
  conversations       conversations[]       @relation("conversation_creator")
}

model conversations {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  creator_id String?

  users_conversations users_conversations[]
  messages            messages[]
  creator             users?                @relation("conversation_creator", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model users_conversations {
  id              String           @id @default(uuid())
  user_id         String
  conversation_id String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  role            ConversationRole @default(PARTICIPANT)

  conversation conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  users        users?        @relation(fields: [user_id], references: [id])

  @@unique([user_id, conversation_id])
}

enum ConversationRole {
  CREATOR
  MODERATOR
  PARTICIPANT
}
